name: Publish

on: workflow_dispatch

jobs:
  publish:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0

    - name: Install Dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Prepare Release
      run: echo "RELEASE_VERSION=$(cat ExcelAD.csproj | grep -o '<Version>.*</Version>' | grep -o '[0-9\.]*')" >> $env:GITHUB_ENV

    - name: Create Release
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const oldReleases = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag: `v${process.env.RELEASE_VERSION}`
            })
            console.log(JSON.stringify(oldReleases))

            const newRelease = await github.rest.repos.createRelease({
              owner,
              repo,
              name: process.env.RELEASE_VERSION,
              tag_name: `v${process.env.RELEASE_VERSION}`,
              draft: true,
            });

            const fs = require("fs");
            ["ExcelAD-AddIn-packed.xll", "ExcelAD-AddIn64-packed.xll"].forEach((file) => {
              github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id: newRelease.data.id,
                name: file,
                data: fs.readFileSync(`./bin/Release/net6.0-windows/publish/${file}`),
              });
            })

          } catch (error) {
            core.setFailed(error.message);
          }